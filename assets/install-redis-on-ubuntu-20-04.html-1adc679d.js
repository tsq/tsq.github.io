import{_ as t,p as r,q as d,s,R as e,t as a,w as c,Y as i,n as o}from"./framework-aa5c4115.js";const l={},p={href:"https://redis.io",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/antirez",target:"_blank",rel:"noopener noreferrer"},v={href:"https://helpcdn.aliyun.com/product/26340.html",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="第一步-安装redis" tabindex="-1"><a class="header-anchor" href="#第一步-安装redis" aria-hidden="true">#</a> 第一步：安装Redis</h2><p>在Ubuntu 20.04上安装Redis很简单，我们首先对包管理工具apt进行一次更新，更新完毕后就可以直接安装redis-server这个软件包，两条命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> update
<span class="token function">apt</span> <span class="token function">install</span> redis-server <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令执行完毕后，其实redis就安装好了，它正在以守护进程的形式运行在后台。</p><p>为了验证Redis是否安装成功，我们可以使用<code>redis-cli</code>命令进入交互模式，并输入<code>ping</code>命令，如果返回值是<code>pong</code>，那么就代表安装成功。最后使用<code>exit</code>退出当前交互。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ redis-cli
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">ping</span>
PONG
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exit</span>
➜  ~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第二步-管理redis" tabindex="-1"><a class="header-anchor" href="#第二步-管理redis" aria-hidden="true">#</a> 第二步：管理Redis</h2><p>Redis安装完毕后，有时候我们需要查看Redis目前的运行状态或者对Redis做重启等操作，这时候就要用到<code>systemctl</code>这个工具。例如下面的命令，我们使用<code>systemctl status redis-server</code>这条命令就可以输出当前Redis的运行状态，如果看到<code>running</code>就代表Redis目前一切运行正常。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ systemctl status redis-server
● redis-server.service - Advanced key-value store
     Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/redis-server.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2020</span>-10-26 00:34:25 CST<span class="token punctuation">;</span> 2min 4s ago
       Docs: http://redis.io/documentation,
             man:redis-server<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
   Main PID: <span class="token number">7099</span> <span class="token punctuation">(</span>redis-server<span class="token punctuation">)</span>
      Tasks: <span class="token number">4</span> <span class="token punctuation">(</span>limit: <span class="token number">2194</span><span class="token punctuation">)</span>
     Memory: <span class="token number">2</span>.8M
     CGroup: /system.slice/redis-server.service
             └─7099 /usr/bin/redis-server <span class="token number">127.0</span>.0.1:6379

Oct <span class="token number">26</span> 00:34:25 iZ8vb8fa17pr9s3louozngZ systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting Advanced key-value store<span class="token punctuation">..</span>.
Oct <span class="token number">26</span> 00:34:25 iZ8vb8fa17pr9s3louozngZ systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: redis-server.service: Can&#39;t <span class="token function">open</span> PID <span class="token function">file</span> /run/redis/redis-server.pid <span class="token operator">&gt;</span>
Oct <span class="token number">26</span> 00:34:25 iZ8vb8fa17pr9s3louozngZ systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started Advanced key-value store.
lines <span class="token number">1</span>-14/14 <span class="token punctuation">(</span>END<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了status，另外的常用命令还有 <code>systemctl stop redis-server</code> 和 <code>systemctl restart redis-server</code>，它们分别用于停止Redis服务和重启Redis服务。</p><h2 id="第三步-修改redis配置" tabindex="-1"><a class="header-anchor" href="#第三步-修改redis配置" aria-hidden="true">#</a> 第三步：修改Redis配置</h2><p>我们常常需要对Redis的默认配置进行一些修改，比如说更改绑定IP或者为Redis添加密码认证等等，这时候就需要我们去手动修改Redis的配置文件，修改完毕后还需要重启Redis。</p><p>对于刚刚的Redis安装，生成的Redis配置文件路径是：<code>/etc/redis/redis.conf</code>，我们可以直接使用vim去编辑它。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为我的这台Redis服务器需要被内网其它多台服务器访问，而Redis默认只对<code>127.0.0.1</code>开放，所以我需要对Redis的绑定IP进行修改。如下面所示，定位到bind那一行，我将配置文件中的绑定IP修改成了<code>0.0.0.0</code>，这样内网的其它服务器就都可以访问这台Redis服务器了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),b=s("div",{class:"custom-container danger"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M10 10l4 4m0-4l-4 4"})])]),s("p",{class:"custom-container-title"},"DANGER"),s("p",null,"因为后面我会取消这台Redis服务器的公网IP，让它只存在于内网环境，所以就有了一层天然的防火墙，设置成0.0.0.0并不影响安全性。如果你的Redis是暴露在公网上面，那0.0.0.0是不推荐的，推荐的做法是开启密码认证+绑定一个白名单IP")],-1),k=i(`<p>配置文件修改完毕后，需要对其进行一次重启，我们还是使用systemctl这个工具，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart redis-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启完毕后，我们可以使用<code>netstat</code>命令来查看一下Redis绑定的IP地址以及端口号：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">netstat</span> <span class="token parameter variable">-lnp</span> <span class="token operator">|</span> <span class="token function">grep</span> redis
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:6379          <span class="token number">0.0</span>.0.0:*               LISTEN      <span class="token number">7600</span>/redis-server <span class="token number">1</span>
tcp6       <span class="token number">0</span>      <span class="token number">0</span> ::1:6379                :::*                    LISTEN      <span class="token number">7600</span>/redis-server <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出我们可以看到Redis的绑定IP已经变成了 <code>0.0.0.0</code>并监听在默认端口6379。</p>`,5),h=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"对于Redis配置文件的修改，另外一个常用的修改是开启密码认证，在redis.conf文件中我们可以直接定位到 # requirepass foobared 的地方，取消对这一行的注释并将foobared换成自己想要的密码。修改完毕后，使用systemctl重启Redis即可。")],-1),g=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),e(" 总结")],-1),R=s("p",null,[e("在Ubuntu 20.04上安装Redis其实非常的简单，如果你不需要修改绑定IP或者开启密码认证，那么直接使用"),s("code",null,"apt install redis-server -y"),e("这一条命令就可以了。")],-1),f=s("p",null,"本文介绍了在Ubuntu 20.04上自建Redis的方法，不过如果你对Redis性能、安全或者数据备份等方面要求比较高，建议你还是直接购买云服务厂商提供的Redis服务，虽然会贵很多，但是相较于自建带来的后续种种维护操作，我想这种购买一定物有所值。",-1);function _(x,y){const n=o("ExternalLinkIcon");return r(),d("div",null,[s("p",null,[s("a",p,[e("Redis"),a(n)]),e("是由意大利程序员"),s("a",u,[e("Salvatore Sanfilippo"),a(n)]),e("编写的一款key-value数据库，因为读取速度特别快，所以常常被用于缓存数据库。最近自己在写一个项目，项目的数据库使用的是Mysql，为了降低Mysql的读取次数，我决定将一些Mysql读操作的结果缓存至Redis，这样一来，就需要准备一台Redis服务器。因为我使用的是阿里云，所以可以直接购买阿里云提供的"),s("a",v,[e("云数据库Redis"),a(n)]),e("。但是鉴于我的这个项目对Redis的各项性能要求并不高以及节省成本的考虑，我决定直接购买一台ECS并在上面自建Redis。因为我选择的ECS是Ubuntu 20.04，所以这篇文章就介绍一下如何在Ubuntu 20.04上安装Redis。")]),c(" more "),m,b,k,h,g,R,f])}const I=t(l,[["render",_],["__file","install-redis-on-ubuntu-20-04.html.vue"]]);export{I as default};
