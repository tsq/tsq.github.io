import{_ as p,p as c,q as o,s as n,R as s,t as a,w as i,Y as t,n as l}from"./framework-aa5c4115.js";const r="/imgs/devops/circleci-npm-publish/1.png",u="/imgs/devops/circleci-npm-publish/2.png",d="/imgs/devops/circleci-npm-publish/3.png",k="/imgs/devops/circleci-npm-publish/4.png",m="/imgs/devops/circleci-npm-publish/5.png",h="/imgs/devops/circleci-npm-publish/6.png",b="/imgs/devops/circleci-npm-publish/7.png",g="/imgs/devops/circleci-npm-publish/8.png",_="/imgs/devops/circleci-npm-publish/9.png",v={},f=n("code",null,"npm publish",-1),C=n("code",null,"git tag v1.0.1 && git push orgin v1.0.1",-1),y={href:"https://circleci.com/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[s("为了学习，我将准备这样一个演示项目：首先这个项目是使用Github进行托管，main分支为默认分支，当我们往main分支提交代码时，会首先触发CircleCI对main分支的代码进行测试，测试如果通过，CircleCI会将当前代码发不到npm，最后CircleCI会根据"),n("code",null,"package.json"),s("中的"),n("code",null,"version"),s("字段，往Github提交一个新的tag。")],-1),N=n("p",null,"可以看到，测试、npm发布、git tag创建全都由CircleCI自动化完成，无需人工介入。好的，下面我们就来看下具体如何实现的吧！",-1),x=n("h2",{id:"第一步-准备演示项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第一步-准备演示项目","aria-hidden":"true"},"#"),s(" 第一步：准备演示项目")],-1),I={href:"https://github.com/tsq-blog/circleci-npm-publish",target:"_blank",rel:"noopener noreferrer"},K=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"你需要在package.json中更换name字段，因为这个包名已经被我这个项目占用了。")],-1),M=t(`<p>这个项目的<code>index.js</code>中只暴露出了一个简单的加法函数，用于返回两个数的和，而在<code>test.js</code>我对这个这个加法函数进行了简单的测试。我们可以通过执行<code>npm test</code>查看测试结果。这样我们就有了包以及对应的测试代码。</p><p>而在CircleCI的配置文件<code>.circleci/config.yml</code>，我是这样写的：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2.1</span>
<span class="token key atrule">orbs</span><span class="token punctuation">:</span>
  <span class="token key atrule">node</span><span class="token punctuation">:</span> circleci/node@1.1
  <span class="token key atrule">npm-publisher</span><span class="token punctuation">:</span> uraway/npm<span class="token punctuation">-</span>publisher@0.2.0
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span>
    <span class="token key atrule">executor</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> node/default
      <span class="token key atrule">tag</span><span class="token punctuation">:</span> <span class="token string">&quot;14.15&quot;</span>
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> checkout
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm test
<span class="token key atrule">workflows</span><span class="token punctuation">:</span>
  <span class="token key atrule">test_and_npm_publish_and_git_tag_push</span><span class="token punctuation">:</span>
    <span class="token key atrule">jobs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">test</span><span class="token punctuation">:</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token key atrule">branches</span><span class="token punctuation">:</span>
              <span class="token key atrule">only</span><span class="token punctuation">:</span> main
      <span class="token punctuation">-</span> <span class="token key atrule">npm-publisher/publish-from-package-version</span><span class="token punctuation">:</span>
          <span class="token key atrule">requires</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> test
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token key atrule">branches</span><span class="token punctuation">:</span>
              <span class="token key atrule">only</span><span class="token punctuation">:</span> main
          <span class="token key atrule">ssh-fingerprints</span><span class="token punctuation">:</span> b9<span class="token punctuation">:</span>c4<span class="token punctuation">:</span>aa<span class="token punctuation">:</span>e9<span class="token punctuation">:</span>10<span class="token punctuation">:</span>4a<span class="token punctuation">:</span>16<span class="token punctuation">:</span>ca<span class="token punctuation">:</span>ef<span class="token punctuation">:</span>19<span class="token punctuation">:</span>dd<span class="token punctuation">:</span>b8<span class="token punctuation">:</span>2e<span class="token punctuation">:</span>00<span class="token punctuation">:</span>4e<span class="token punctuation">:</span>fa
          <span class="token key atrule">publish-token-variable</span><span class="token punctuation">:</span> NPM_TOKEN
          <span class="token key atrule">push-git-tag</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，利用了两个orbs，一个提供nodejs环境用于完成测试，一个提供npm包的发布功能以及创建git tag功能。</p><p>在<code>test_and_npm_publish_and_git_tag_push</code>下的<code>job</code>可以看到有两个任务，分别是<code>test</code>和<code>npm-publisher/publish-from-package-version</code>，我对它们都进行了过滤，只有来自main分支的提交才会触发测试和npm包的发布操作， 另外后者的执行依赖于前者，也就是只有当测试通过了才会执行包的发布和git tag的创建。</p>`,5),T=n("code",null,"npm-publisher",-1),j={href:"https://circleci.com/developer/orbs/orb/uraway/npm-publisher",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>对于这份配置，我们需要关注以下两个配置项：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ssh-fingerprints</span><span class="token punctuation">:</span> b9<span class="token punctuation">:</span>c4<span class="token punctuation">:</span>aa<span class="token punctuation">:</span>e9<span class="token punctuation">:</span>10<span class="token punctuation">:</span>4a<span class="token punctuation">:</span>16<span class="token punctuation">:</span>ca<span class="token punctuation">:</span>ef<span class="token punctuation">:</span>19<span class="token punctuation">:</span>dd<span class="token punctuation">:</span>b8<span class="token punctuation">:</span>2e<span class="token punctuation">:</span>00<span class="token punctuation">:</span>4e<span class="token punctuation">:</span>fa
<span class="token key atrule">publish-token-variable</span><span class="token punctuation">:</span> NPM_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先<code>publish-token-variable: NPM_TOKEN</code>这个配置的意思是，我们需要在CircleCI中为这个项目添加一个环境变量，名叫<code>NPM_TOKEN</code>，这个token的值，在第二步我们可以了解到，它是通过npm官网生成，通过这个token，CircleCI就可以利用<code>npm-publisher</code>这个orb，完成与npm的认证，从而完成包的发布工作。</p><p>另一个<code>ssh-fingerprints: b9:c4:aa:e9:10:4a:16:ca:ef:19:dd:b8:2e:00:4e:fa</code>这里<code>b9:c4:aa:e9:10:4a:16:ca:ef:19:dd:b8:2e:00:4e:fa</code>这个值，在第三步我们可以了解到，我们在CircleCI中为这个项目生成了一个<code>User key</code>，这样CircleCI就可以完成与Github之间的认证，当npm包发布完毕后，<code>npm-publisher</code>这个orb会接着往Github提交一个新的git tag。</p><p>下面我们就来分别看下，如何获取<code>NPM_TOKEN</code>和<code>ssh-fingerprints</code>的值。</p><h2 id="第二步-获取npm-token" tabindex="-1"><a class="header-anchor" href="#第二步-获取npm-token" aria-hidden="true">#</a> 第二步：获取npm token</h2>`,6),P=n("code",null,"NPM_TOKEN",-1),G={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"Access Tokens",-1),q=n("img",{src:r,alt:""},null,-1),V=t('<p>点击后，就会进入token的创建页面，点击按钮<code>Generate New Token</code>，需要注意的是，创建时，在类型弹出框中，我们需要选择<code>Publish</code>，这样，这个token才会具有发布包的权限，如下图：</p><p><img src="'+u+'" alt=""></p><p>完成后就可以看到生成的token，我们将它手动复制，如下图：</p><p><img src="'+d+'" alt=""></p><p>接下来就需要回到CircleCI中为这个项目新增一个环境变量了，环境变量的Name就是<code>NPM_TOKEN</code>, Value就是刚刚复制的值：</p><p><img src="'+k+'" alt=""></p><p>至此<code>NPM_TOKEN</code>的配置就完成了。</p><h2 id="第三步-配置git-tag的创建" tabindex="-1"><a class="header-anchor" href="#第三步-配置git-tag的创建" aria-hidden="true">#</a> 第三步：配置git tag的创建</h2><p>这一步，我们来配置<code>ssh-fingerprints</code>以允许CircleCI往Github提交新的tag。</p><p>在CircleCI中，打开项目的设置页，点击<code>SSH Keys</code>，在<code>User Key</code>的区域，点击按钮<code>Add User Key</code>，如下图：</p><p><img src="'+m+'" alt=""></p><p>这时可以看到，这个User Key的fingerprint值，一串冒号分割的16进制值，如下图：</p><p><img src="'+h+'" alt=""></p>',13),B=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"CircleCI要想往Github提交一个tag，必须要完成ssh的认证工作，CircleCI为此采取的方式是，ssh的公钥和私钥由CircleCI自动生成，公钥，CircleCI会将它上传至Github，而私钥由CircleCI自己保存。"),n("p",null,[s("因为私钥很重要，不能泄露，因此我们在config.yml中的"),n("code",null,"ssh-fingerprints"),s("不能直接明文填写私钥的值，转而填写一段刚刚看到的一串冒号分割的16进制值，这样CircleCI在执行过程中，它可以通过这串值找到真正对应的私钥，从而达到隐藏私钥的目的。")])],-1),U=n("p",null,[s("最后，将这串值复制并添加到"),n("code",null,"ssh-fingerprints"),s("配置项。")],-1),A=n("h2",{id:"第四步-测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第四步-测试","aria-hidden":"true"},"#"),s(" 第四步：测试")],-1),S=n("p",null,[s("完成了"),n("code",null,"NPM_TOKEN"),s("和"),n("code",null,"ssh-fingerprints"),s("值的配置，准备工作就都做完了，为了测试，我们可以往main分支做一次提交，之后就可以在CircleCI中看到执行结果，我的这次提交可以查看这里:")],-1),L={href:"https://app.circleci.com/pipelines/github/tsq-blog/circleci-npm-publish/3/workflows/33e3a04f-21bd-41f2-b67a-ad2b08913fce",target:"_blank",rel:"noopener noreferrer"},R=t('<p><img src="'+b+'" alt=""></p><p>可以看到，执行成功，接着可以回到npm中找到这个包，校验下新版本有没有被发布成功：</p><p><img src="'+g+'" alt=""></p><p>最后回到Github上，校验下git tag有没有创建成功：</p><p><img src="'+_+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在这篇文章中，我们利用CircleCI实现了代码的测试，到npm包的发布，再到git tag的创建，全程都由CircleCI自动化完成，如果你想创建一个高质量的npm包，我想这个工作流程一定会给你带来很大的帮助！</p>',7);function D(H,W){const e=l("ExternalLinkIcon");return c(),o("div",null,[n("p",null,[s("如果要发布一个npm包，我们可以选择手动的方式进行操作，通常的操作步骤是先在本地使用"),f,s("将包发布到npm中，接着在本地新建一个tag并提交到远程，例如"),C,s("。手动的方式虽然可以实现npm包的发布，但是，如果我们需要经常更新包的版本，与其每次都做一些重复的手动操作，我们其实是可以利用第三方CI/CD平台自动帮我们完成这些操作，这样不仅可以帮我们省掉手动操作带来的耗时，同时我们可以加上自动化测试环节，只有测试通过了，再进行发布操作，从而提高包的质量。这篇文章，我就通过一个小的demo来演示一下如何利用"),n("a",y,[s("CircleCI"),a(e)]),s("完成npm包的自动发布。")]),i(" more "),w,N,x,n("p",null,[s("我在Github上创建了一个简单的演示项目："),n("a",I,[s("https://github.com/tsq-blog/circleci-npm-publish"),a(e)])]),K,M,n("p",null,[s("关于提供npm包发布功能的"),T,s("这个orb，可以通过官方文档："),n("a",j,[s("https://circleci.com/developer/orbs/orb/uraway/npm-publisher"),a(e)]),s("了解更多信息。")]),E,n("p",null,[s("为了获取"),P,s("这个环境变量的值，我们需要前往npm官网: "),n("a",G,[s("https://www.npmjs.com/"),a(e)]),s(" ， 使用自己的账号登录后，点击个人头像，就可以看到菜单项"),O,s("，如下图： "),q]),V,B,U,A,S,n("p",null,[n("a",L,[s("https://app.circleci.com/pipelines/github/tsq-blog/circleci-npm-publish/3/workflows/33e3a04f-21bd-41f2-b67a-ad2b08913fce"),a(e)]),s(".")]),R])}const z=p(v,[["render",D],["__file","circleci-npm-publish.html.vue"]]);export{z as default};
